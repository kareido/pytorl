import sys
import argparse
import os
import re
from site import getsitepackages
import yaml

"""
Since the whole project is under development, for convenient modification I temporarily do not use
setuptools. So, this module serves as a 'mock' installation.
"""

# why module name is also a variable? well, since it's under dev, everything changes ...
MODULE_NAME = 'pytorl'

ENTRY_MODULE = '%s.settings.entries' % MODULE_NAME

ENTRY_POINTS = {
    'rlrun': 'rl_run',
    'lrun': 'lrun',
}

TEMPLATE = '''{2}
# -*- coding: utf-8 -*-
import re
import sys

from {0} import {1}

if __name__ == '__main__':
    sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])
    sys.exit({1}())
'''


def setup():
    parser = argparse.ArgumentParser()
    parser.add_argument('--experiment-dir', '-dir', required=True,
        help='specify the directory for %s experiments' % MODULE_NAME)
    opt = parser.parse_args()

    ################################################################################
    # 1. making .yaml to settings
    print('[Step 1] dump {0}.yaml to {0}/settings ..........'.format(MODULE_NAME), flush=True)
    exp_dir = os.path.abspath(opt.experiment_dir)
    yaml_file = os.path.abspath('{0}/settings/{0}.yaml'.format(MODULE_NAME))

    while True:
        print('[Step 1] please confirm that from now on '
              'you want to save your experiments in:\n'
              '[Step 1] >>>>>>>>>>>>> [%s] <<<<<<<<<<<<< [Y/n]:' % exp_dir, end='', flush=True)
        response = input().strip()
        if response in {'Y', 'y'}: break
        elif response in {'N', 'n'}: sys.exit()
        else: continue

    if not os.path.isdir(exp_dir):
        if os.path.exists(exp_dir): raise FileExistsError('experiment_dir exists and is a file')
        os.makedirs(exp_dir)

    yaml_data = {
        'module_name': MODULE_NAME,
        'entry_module': ENTRY_MODULE,
        'entry_points': ENTRY_POINTS,
        'experiment_dir': exp_dir,
    }

    with open(yaml_file, 'w') as f:
        f.write(
            '# this yaml file is generated by dev_setup.py as a record and config\n'
            '# warning: change experiment_dir content will have effect on the rl-run\n'
            '# only modify it when you are intended to do so\n\n'
        )
        stream = yaml.dump(yaml_data, default_flow_style=False)
        f.write(stream.replace('  ', '    '))
    print('[Step 1] >>>>>>>>>>>>> [OK] >>>>>>>>>>>>>', flush=True)

    ################################################################################
    # 2. write .pth to site-packages
    print('[Step 2] write %s.pth to site-packages ..........' % MODULE_NAME, flush=True)
    site_path = getsitepackages()[0]
    pkg_path = os.getcwd()

    if not os.path.isdir(os.path.join(pkg_path, MODULE_NAME)):
        raise ModuleNotFoundError('%s module not found' % MODULE_NAME)
    if not os.path.isdir(site_path):
        raise NotADirectoryError('site-packages path [%s] not found' % site_path)

    site_file = os.path.join(site_path, '%s.pth' % MODULE_NAME)

    with open(site_file, 'w') as f:
        f.write(pkg_path)
    print('[Step 2] >>>>>>>>>>>>> [OK] >>>>>>>>>>>>>', flush=True)

    ################################################################################
    # 3. setup command line entry points
    print('[Step 3] setup command line entry points ..........', flush=True)
    interpreter = sys.executable
    shebang = '#!' + interpreter
    bin_path = os.path.dirname(interpreter)

    if not os.path.isdir(bin_path):
        raise NotADirectoryError('executable path not found')

    for entry, method in ENTRY_POINTS.items():
        script_text = TEMPLATE.format(ENTRY_MODULE, method, shebang)
        bin_file = os.path.join(bin_path, entry)
        with open(bin_file, 'w') as f:
            f.write(script_text)
        os.chmod(bin_file, 0o775)

    print('[Step 3] >>>>>>>>>>>>> [OK] >>>>>>>>>>>>>', flush=True)
    print('[Setup ] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<', flush=True)
    print('[Setup ] <<<<<<<<<< [ALL DONE] <<<<<<<<<<', flush=True)



if __name__ == '__main__':
    setup()



